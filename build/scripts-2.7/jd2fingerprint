#!/home/caoyaqiang/miniconda3/bin/python
#--coding:utf-8 --
"""
jd2fingerprint
2017-10-12: finished 
2017-10-15: integrated into cLoops 
"""
__date__ = "2017-10-10"
__modified__ = ""
__email__ = "caoyaqiang@picb.ac.cn"

#general library
import os, argparse
from datetime import datetime
from glob import glob

#3rd library
import numpy as np
import pandas as pd
from joblib import Parallel, delayed

#cLoops
from cLoops.utils import getLogger, jd2fingerprintHelp
from cLoops.io import parseJd, parseIv
from cLoops.cPlots import plotFingerPrint

#global settings
global logger


def jd2contactMatrixUpper(jd, binSize=2000):
    chrom, mat = parseJd(jd)
    mat = mat[:, 1:]
    minC = np.min(mat)
    ds = {}
    for t in mat:
        nx = (t[0] - minC) / binSize
        ny = (t[1] - minC) / binSize
        if nx not in ds:
            ds[nx] = {}
        if ny not in ds[nx]:
            ds[nx][ny] = 0
        ds[nx][ny] += 1
    nds = []
    for nx in ds.keys():
        for ny in ds[nx].keys():
            nds.append(ds[nx][ny])
    nds = np.array(nds)
    return nds


def contactMatrixUpper2Bins(ds, bins=100):
    #default is ascending sort
    ds.sort()
    #bin the contacts into 100 bins for comparing between samples
    nn = []
    step = len(ds) / bins
    for i in xrange(0, len(ds), step):
        if i + step > len(ds):
            break
        nn.append(ds[i:i + step].sum())
    nn = np.array(nn)
    nn = np.cumsum(nn) / float(nn.sum())
    return nn


def jds2FingerPrint(jds, binSize=2000, cpu=10, bins=100):
    ds = Parallel(n_jobs=cpu)(delayed(jd2contactMatrixUpper)(jd, binSize)
                              for jd in jds)
    ds = np.concatenate(ds)
    nn = contactMatrixUpper2Bins(ds, bins)
    return nn


def getFingerPrint(dirs, labels, fout, binSize=2000, cpu=10, plot=1, bins=100):
    dirs = dirs.split(",")
    if labels != "" and len(dirs) != len(labels.split(",")):
        logger.error(
            "Numbers of directories and labels are not equal! Return.")
        return
    if labels != "":
        labels = labels.split(",")
    data = {}
    x = np.linspace(0, 1, bins)
    y = np.linspace(0, 1, bins)
    data["random"] = y
    for i in xrange(len(dirs)):
        logger.info("Getting finger print for %s" % dirs[i])
        nlabel = dirs[i].split("/")[-1]
        s = jds2FingerPrint(
            glob(os.path.join(dirs[i], "*.jd")),
            binSize=binSize,
            cpu=cpu,
            bins=bins)
        if labels != "" and labels[i] != "":
            data[labels[i]] = s
        else:
            data[nlabel] = s
    data = pd.DataFrame(data)
    data.index = x
    data.to_csv("%s_fingerprint.txt" % fout)
    if plot:
        plotFingerPrint(data, fout)


if __name__ == "__main__":
    start = datetime.now()
    global logger
    fn = os.path.join(os.getcwd(), "jd2fingerprint.log")
    logger = getLogger(fn)
    op = jd2fingerprintHelp()
    getFingerPrint(
        op.d,
        op.labels,
        op.output,
        binSize=op.binSize,
        cpu=op.cpu,
        plot=op.plot)
    usedtime = datetime.now() - start
    r = "jd2fingerprint finished. Bye! Used time:%s" % usedtime
    logger.info(r)
